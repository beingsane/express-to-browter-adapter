{"version":3,"file":"index.modern.js","sources":["src/ExpressToBrowterAdapter.ts"],"sourcesContent":["import { IRouteContext, IRouterAdapter } from '@donnyroufs/browter'\nimport {\n  Router,\n  Request,\n  Response,\n  NextFunction,\n} from 'express-serve-static-core'\n\nexport type ExpressRouterFactory = () => Router\n\nexport class ExpressToBrowterAdapter implements IRouterAdapter {\n  public adaptee: ExpressRouterFactory\n  public router: Router\n  public logExceptions: boolean\n\n  /**\n   *\n   * @param adaptee router that has to be adapted to Browters API\n   */\n  constructor(adaptee: () => Router, logExceptions: boolean = true) {\n    this.adaptee = adaptee\n    this.router = this.adaptee()\n    this.logExceptions = logExceptions\n  }\n\n  /**\n   * @description\n   * Browter will use this to map the handlers to the desired endpoints\n   */\n  public route({\n    verb,\n    endpoint,\n    middleware,\n    routeHandler,\n  }: IRouteContext): void {\n    const wrappedHandler = this.catchExceptionsWrapper(routeHandler)\n    // @ts-ignore\n    this.router[verb](endpoint, ...middleware, wrappedHandler)\n  }\n\n  /**\n   * @description\n   * Tells the web framework to use the given router(middleware)\n   */\n  public use(namespace: string, router: Router): void {\n    this.router.use(namespace, router)\n  }\n\n  public catchExceptionsWrapper(routeHandler: any) {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        return await routeHandler(req, res)\n      } catch (err) {\n        if (this.logExceptions) console.log(err)\n        return next(err)\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Creates a new instance of the adapter which is required\n   * within browter for grouping.\n   */\n  public create() {\n    return new ExpressToBrowterAdapter(this.adaptee, this.logExceptions)\n  }\n\n  /**\n   * @description\n   * Returns the correct format in order to initialize\n   * your router within your framework.\n   */\n  public build() {\n    return this.router\n  }\n}\n"],"names":["ExpressToBrowterAdapter","constructor","adaptee","logExceptions","this","router","route","verb","endpoint","middleware","routeHandler","wrappedHandler","catchExceptionsWrapper","use","namespace","req","res","next","err","_this","console","log","create","build"],"mappings":"MAUaA,EASXC,YAAYC,EAAuBC,GAAyB,GAC1DC,KAAKF,QAAUA,EACfE,KAAKC,OAASD,KAAKF,UACnBE,KAAKD,cAAgBA,EAOhBG,OAAMC,KACXA,EADWC,SAEXA,EAFWC,WAGXA,EAHWC,aAIXA,IAEA,MAAMC,EAAiBP,KAAKQ,uBAAuBF,GAEnDN,KAAKC,OAAOE,GAAMC,KAAaC,EAAYE,GAOtCE,IAAIC,EAAmBT,GAC5BD,KAAKC,OAAOQ,IAAIC,EAAWT,GAGtBO,uBAAuBF,cAC5B,sBAAcK,EAAcC,EAAeC,GACzC,IACE,aAAaP,EAAaK,EAAKC,GAC/B,MAAOE,GAEP,OADIC,EAAKhB,eAAeiB,QAAQC,IAAIH,GAC7BD,EAAKC,KAUXI,SACL,WAAWtB,EAAwBI,KAAKF,QAASE,KAAKD,eAQjDoB,QACL,YAAYlB"}