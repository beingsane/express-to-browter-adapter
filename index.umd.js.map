{"version":3,"file":"index.umd.js","sources":["src/ExpressToBrowterAdapter.ts"],"sourcesContent":["import { IRouteContext, IRouterAdapter } from '@donnyroufs/browter'\nimport {\n  Router,\n  Request,\n  Response,\n  NextFunction,\n} from 'express-serve-static-core'\n\nexport type ExpressRouterFactory = () => Router\n\nexport class ExpressToBrowterAdapter implements IRouterAdapter {\n  public adaptee: ExpressRouterFactory\n  public router: Router\n  public logExceptions: boolean\n\n  /**\n   *\n   * @param adaptee router that has to be adapted to Browters API\n   */\n  constructor(adaptee: () => Router, logExceptions: boolean = true) {\n    this.adaptee = adaptee\n    this.router = this.adaptee()\n    this.logExceptions = logExceptions\n  }\n\n  /**\n   * @description\n   * Browter will use this to map the handlers to the desired endpoints\n   */\n  public route({\n    verb,\n    endpoint,\n    middleware,\n    routeHandler,\n  }: IRouteContext): void {\n    const wrappedHandler = this.catchExceptionsWrapper(routeHandler)\n    // @ts-ignore\n    this.router[verb](endpoint, ...middleware, wrappedHandler)\n  }\n\n  /**\n   * @description\n   * Tells the web framework to use the given router(middleware)\n   */\n  public use(namespace: string, router: Router): void {\n    this.router.use(namespace, router)\n  }\n\n  public catchExceptionsWrapper(routeHandler: any) {\n    return async (req: Request, res: Response, next: NextFunction) => {\n      try {\n        return await routeHandler(req, res)\n      } catch (err) {\n        if (this.logExceptions) console.log(err)\n        return next(err)\n      }\n    }\n  }\n\n  /**\n   * @description\n   * Creates a new instance of the adapter which is required\n   * within browter for grouping.\n   */\n  public create() {\n    return new ExpressToBrowterAdapter(this.adaptee, this.logExceptions)\n  }\n\n  /**\n   * @description\n   * Returns the correct format in order to initialize\n   * your router within your framework.\n   */\n  public build() {\n    return this.router\n  }\n}\n"],"names":["adaptee","logExceptions","this","router","route","verb","endpoint","middleware","wrappedHandler","catchExceptionsWrapper","routeHandler","use","namespace","req","res","next","err","_this","console","log","create","ExpressToBrowterAdapter","build"],"mappings":"sRAmBE,WAAYA,EAAuBC,YAAAA,IAAAA,GAAyB,GAC1DC,KAAKF,QAAUA,EACfE,KAAKC,OAASD,KAAKF,UACnBE,KAAKD,cAAgBA,EAZzB,2BAmBSG,MAAA,kBACLC,IAAAA,KACAC,IAAAA,SACAC,IAAAA,WAGMC,EAAiBN,KAAKO,yBAF5BC,sBAIKP,QAAOE,YAAMC,UAAaC,GAAYC,QAOtCG,IAAA,SAAIC,EAAmBT,GAC5BD,KAAKC,OAAOQ,IAAIC,EAAWT,MAGtBM,uBAAA,SAAuBC,SAKpBR,KAJR,gBAAcW,EAAcC,EAAeC,sEAE1BL,EAAaG,EAAKC,yEACxBE,GAEP,OADIC,EAAKhB,eAAeiB,QAAQC,IAAIH,GAC7BD,EAAKC,MALhB,uCAeKI,OAAA,WACL,WAAWC,EAAwBnB,KAAKF,QAASE,KAAKD,kBAQjDqB,MAAA,WACL,YAAYnB"}